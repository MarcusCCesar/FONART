Metadata-Version: 2.1
Name: ffs
Version: 0.0.8.2
Summary: Python Filesystem Api helpers
Home-page: http://www.deadpansincerity.com/docs/ffs
Author: David Miller
Author-email: david@deadpansincerity.com
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 2.6
Classifier: Programming Language :: Python :: 3.1
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: OS Independent
Classifier: Development Status :: 2 - Pre-Alpha
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Libraries
License-File: COPYING.txt
Requires-Dist: six >=1.2.0


===
ffs
===

Python Filesystem Api helpers

.. image:: https://secure.travis-ci.org/davidmiller/ffs.png?branch=master
   :alt: Build Status
   :target: https://secure.travis-ci.org/davidmiller/ffs

Dealing with the filesystem in Python is clunky. Those of us who have an almost
emotional engagement with the elegance of the APIs we use, feel that it shouldn't
have to be this way. Not in Python.

Rationale
=========

This dance started waaay back. Frist there was Jason Orendorff's path.py, back
in 2004. Then in 05-06 Reinhold Birkenfeld and BjÃ¶rn Lindqvist tweaked it for
PEP 355, which tried to get something like that into the Standard Library. The
attempt failed miserably. Then in 2007 there was Mike Orr's Unipath, which added
a test suite and made it setuptoolsable.

Phew.

Question (short): So why are you doing it again?

Question (by implication): The idea has been solidly rejected by python-dev, with
strong objections from that community, and there's already a 3rd party module that
does a pretty good job of this stuff for those people who like This Kind Of Thing.
Why should I care?

Answer (short): The name is way more fun.

Answer (less facetiously): The name is way more fun. And four less characters to type.
And you know, if you're going to do something that's arguably a Bad Idea (TM) that
goes against the One True Way, you have to at leas market it properly, and in my life
at least, "FFS Python" is already a well established phrase.

Answer (oh, right, I just looked up what facetious means):

This kind of thing is about APIs. And the APIs that are out there, could *still be
better*. In fact, the APIs *were* better before all the operator overloading got taken
out in a misguided attempt to get the thing into the standard library.

Unipath is self-proclaimed stable since 2007, and hasn't even seen a bugfix release
since 2009. It's used in production by Real People's software that does Real Work.
Right now, I'm not even sure what the *right* API even is, yet alone in a position to
attempt to get patches into a package that's had a stable API for 5 years. That's
Stick-A-Fork-In-It-It's-Done-style stability.

The api for the Path class in ffs *Will* change, without depreciation warnings, on
minor point releases. Hell, this thing's only *on* PyPi at this stage so I can pull it
into a CI system without having to maintain my own cheeseshop.

`Docs`_

`Source`_

`Issues`_

.. _Docs: http://www.deadpansincerity.com/docs/ffs
.. _Source: https://github.com/davidmiller/ffs
.. _Issues: https://github.com/davidmiller/ffs/issues


History
-------

0.0.7.7 ()
+++++++++++++++++++++
Adds .open() to HTTPPath to return file like objects
Adds .checksum() to Path.
Adds .as_zip to base leafbranch path
Adds path argument to newfile 

0.0.7.6 (Feb 13 2014)
+++++++++++++++++++++
Adds minimal archive support to contrib.

0.0.7.5
+++++++
Fixes bugs with CSV header rows when CSV rows have trailing commas/periods.
Uses simplejson when available.
Add the .mimetype property to Path objects

0.0.7.4 (May 02 2013)
+++++++++++++++++++++
Add Path.here() for a nicer syntax for the directory of the calling file.

0.0.7.3 (Nov 19 2012)
+++++++++++++++++++++

Add Path.newfile() and Path.newdir() - non destructive versions of the
contextmanager tempfile() && tempath()

0.0.7.2 (Nov 14 2012)
+++++++++++++++++++++
Add __version__ to main module

0.0.7.1 (Oct 12 2012)
+++++++++++++++++++++

Add glob patterns to Path().ls()
Add a header argument to Path.csv() to autocreate CSV row classes

0.0.7 (Oct 11 2012)
+++++++++++++++++++

Fix bug with Path.ls() so that children are returned as Path objects
relative to the parent.

Expose Path.decode (Useful when using Paths as Django template directories)

0.0.6 (Oct 09 2012)
+++++++++++++++++++

Add ffs.contrib.mold for templating helpers.

0.0.5 (Sep 22 2012)
+++++++++++++++++++

Add a mv() method to Path.
Re-enable rstrip(). (Stdlib uses it e.g. shutil._basename)
Catch the case where we call Path(Path('foo')) and get recursion errors.
Add the formats module for helpers with Fileformats.
Frist entry is the Indeterminate CSV class (ducktypes as both a reader and writer until
you do something deterministic)x
Add a csv contextmanager to Path
DiskFilesystem.open() implicitly calls expanduser
Initial implementation of a HTTP path system

0.0.4.1 (Sep 12 2012)
+++++++++++++++++++++

Copying:
Add a GNU cp clone to nix.
Add the --recursive argument to the filesystem cp implementation
Add a cp(target) method to the Path class

Touching:
When touching a subpath where some parents do not exist, Path().touch('this/that/theother.txt')
should create them and assume the caller knows their own mind. This is consistent with the
behaviour of << and open().

0.0.3 (Sep 11 2012)
+++++++++++++++++++

Reduce the level of String duck-typing to sane levels. Although we do inherit
from str, we bail with AttributeErrors when we think that we're being used
for something absurd - e.g. what's the sane use of Path().splitlines() ?

Overload the / operator to be equivalent to path addition.

Add a mkdir() method to Path. This (and now also touch()) take starargs of
child nodes to the current Path, assuming it is a directory. This allows creating
many directories with one call::

    >>> p = Path(rpmroot)
    >>> p.mkdir('BUILD', 'SOURCES', 'SPECS', 'RPM', 'SRPMS')

Maintain immutability for in-place append and update tests to catch this regression.

Add a Filesystem abstraction layer that allows us to use *nix semantics and
metaphors with anything that uses Path-like structures.

0.0.2 (Aug 21 2012)
+++++++++++++++++++

Added the Path class - string-like with shortcuts!
nix.cd doubles as a function and a contextmanager
Many extra aliases in ffs.nix

0.0.1 (Jul 20 2012)
+++++++++++++++++++

Initial release. Minimal useful feature set. Known incomplete implementations.
